{"version":3,"sources":["../src/puzzle.js"],"names":["reduce","require","isEqual","PuzzleMixin","Puzzle","grid","clues","userSolution","info","extensions","map","row","cell","Object","assign","across","cloned","clue","clueNumber","down","JSON","parse","stringify","processGrid","title","author","copyright","publisher","difficulty","intro","formatExtra","isBlockCell","constructor","equalityTest","exports","module"],"mappings":"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","sourcesContent":["const reduce          = require(\"lodash/reduce\");\nconst isEqual         = require(\"lodash/isEqual\");\nconst PuzzleMixin     = require(\"./puzzle-mixin\");\n\n/**\n * Info object\n *\n * @typedef PuzzleInfo\n *\n * @memberof xpuz.Puzzle\n *\n * @prop {?string} title - the title of the puzzle\n * @prop {?string} author - the author of the puzzle\n * @prop {?string} publisher - the publisher of the puzzle\n * @prop {?string} copyright - the copyright of the puzzle\n * @prop {?string} intro - the introductory text of the puzzle\n * @prop {?*} difficulty - the difficulty level of the puzzle\n * @prop {?object} formatExtra - any extra data for a specific file format\n * (e.g. .puz files have a version string)\n */\n\n/**\n * Represents a puzzle object\n *\n * @memberof xpuz\n * @mixes xpuz.PuzzleMixin\n */\nclass Puzzle {\n\t/**\n\t * @param {object} args - the constructor args\n\t * @param {Types.Grid} args.grid - a two-dimensional array representing the puzzle grid\n\t * @param {{across: object<number, string>, down: object<number, string>}} args.clues - a list of clues\n\t *\tfor across and down, with each collection having the key as the clue number and the value as the clue\n\t *\ttext (e.g. `{across: { 3: \"some clue\" }}`)\n\t * @param {Array<Array<?string>>} [args.userSolution] - the currently filled in guesses of the user stored with this\n\t *\tpuzzle instance. Two dimensional array with the same dimensions as `grid`, where each cell is either a string\n\t *\tor `null` (for block cells)\n\t * @param {xpuz.Puzzle.PuzzleInfo} [args.info] - information about the puzzle\n\t * @param {object} [args.extensions] - extra, possibly implementation-specific information about the puzzle, such as timer\n\t *\tinformation\n\t */\n\tconstructor({\n\t\tgrid,\n\t\tclues,\n\t\tuserSolution,\n\t\tinfo,\n\t\textensions\n\t}) {\n\t\t/**\n\t\t * The definition of the puzzle grid. It is represented as an array of rows, so\n\t\t *\t`grid[0]` is the first row of the puzzle.\n\t\t *\n\t\t * @type Array<Array<Types.GridCell>>\n\t\t * @instance\n\t\t */\n\t\tthis.grid = Puzzle.processGrid(grid || []); // processGrid() is defined in PuzzleMixin\n\t\t\n\t\t/**\n\t\t * Listing of clues for the puzzle\n\t\t *\n\t\t * @type object\n\t\t * @instance\n\t\t *\n\t\t * @property {object} across - an object mapping clue numbers to clue texts for across clues\n\t\t * @property {object} down - an object mapping clue numbers to clue texts for down clues\n\t\t */\n\t\tthis.clues = clues || {\n\t\t\tacross: {},\n\t\t\tdown: {},\n\t\t};\n\n\t\tinfo = info || {};\n\n\t\t/**\n\t\t * An object of various puzzle information, such as author, title, copyright, etc.\n\t\t *\n\t\t * @type object\n\t\t * @instance\n\t\t *\n\t\t * @property {string} [title] - the title of the puzzle\n\t\t * @property {string} [author] - the author of the puzzle\n\t\t * @property {string} [publisher] - the publisher of the puzzle\n\t\t * @property {string} [copyright] - the copyright text of the puzzle\n\t\t * @property {*} [difficulty] - the difficulty level of the puzzle\n\t\t * @property {string} [intro] - the introductory text of the puzzle\n\t\t * @property {?object} [formatExtra] - any additional format-specific data\n\t\t */\n\t\tthis.info = {\n\t\t\ttitle: info.title || \"\",\n\t\t\tauthor: info.author || \"\",\n\t\t\tcopyright: info.copyright || \"\",\n\t\t\tpublisher: info.publisher || \"\",\n\t\t\tdifficulty: info.difficulty || \"\",\n\t\t\tintro: info.intro || \"\",\n\t\t\tformatExtra: info.formatExtra || undefined,\n\t\t};\n\n\t\t/**\n\t\t * A structure representing the current solution as the user has filled it out.\n\t\t *\tThe structure is similar to {@link xpuz.Puzzle#grid|grid}, but\n\t\t *\teach item is a string containing the user's current answer--an empty string\n\t\t *\tif the corresponding grid cell is not filled in, a non-empty string if it's\n\t\t *\tfilled in.\n\t\t *\n\t\t * @type Array<string[]>\n\t\t * @instance\n\t\t */\n\t\tthis.userSolution = userSolution || grid.map(\n\t\t\t(row) => row.map(\n\t\t\t\t(cell) => cell.isBlockCell ? null : \"\"\n\t\t\t)\n\t\t);\n\n\t\t/**\n\t\t * A collection of extra, possibly implementation-dependent data about the puzzle,\n\t\t * such as timer information.\n\t\t *\n\t\t * @type object\n\t\t * @instance\n\t\t */\n\t\tthis.extensions = extensions || {};\n\t}\n\n\t/**\n\t * Returns this puzzle as a plain Javascript object, suitable for serializing to JSON.\n\t *\n\t * @method\n\t *\n\t * @returns {object} object representation of this puzzle object\n\t */\n\ttoJSON = () => {\n\t\treturn {\n\t\t\tgrid: this.grid,\n\t\t\tclues: this.clues,\n\t\t\tuserSolution: this.userSolution,\n\t\t\tinfo: this.info,\n\t\t\textensions: this.extensions,\n\t\t};\n\t}\n\n\t/**\n\t * Returns a deep copy of this puzzle.\n\t *\n\t * @method\n\t *\n\t * @returns {xpuz.Puzzle} cloned Puzzle\n\t */\n\tclone = () => {\n\t\treturn new Puzzle(\n\t\t\t{\n\t\t\t\tgrid: this.grid.map(\n\t\t\t\t\t(row) => row.map(\n\t\t\t\t\t\t(cell) => Object.assign({}, cell) // Clone (shallow) cell object\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\tclues: {\n\t\t\t\t\tacross: reduce(\n\t\t\t\t\t\tthis.clues.across,\n\t\t\t\t\t\t(cloned, clue, clueNumber) => {\n\t\t\t\t\t\t\tcloned[clueNumber] = clue;\n\t\t\n\t\t\t\t\t\t\treturn cloned;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{}\n\t\t\t\t\t),\n\t\t\t\t\tdown: reduce(\n\t\t\t\t\t\tthis.clues.down,\n\t\t\t\t\t\t(cloned, clue, clueNumber) => {\n\t\t\t\t\t\t\tcloned[clueNumber] = clue;\n\t\t\n\t\t\t\t\t\t\treturn cloned;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{}\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\tuserSolution: this.userSolution.map(\n\t\t\t\t\t(row) => row.map(\n\t\t\t\t\t\t(cell) => cell // Values in userSolution are just strings\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\tinfo: Object.assign({}, this.info),\n\t\t\t\textensions: JSON.parse(JSON.stringify(this.extensions)), // Deep clone\n\t\t\t}\n\t\t);\n\t}\n}\n\nPuzzleMixin({\n\tconstructor: Puzzle,\n\tequalityTest: isEqual,\n});\n\nexports = module.exports = Puzzle;\n"],"file":"puzzle.js"}