{"version":3,"sources":["../../src/immutable/puzzle.js"],"names":["require","List","Map","OrderedMap","Record","is","Collection","fromJS","PuzzleMixin","infoSchema","title","author","publisher","copyright","difficulty","intro","formatExtra","PuzzleInfo","schema","grid","clues","across","down","userSolution","info","extensions","ImmutablePuzzle","processGrid","args","map","row","cell","get","isMap","direction","Object","keys","sort","a","b","clueNumber","Number","constructor","equalityTest","getter","obj","path","getIn","setter","value","setIn","sizeOf","size","oldProcessGrid","withMutations","gridWithMutations","exports","module"],"mappings":"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","sourcesContent":["const {\n\tList,\n\tMap,\n\tOrderedMap,\n\tRecord,\n\tis,\n\tCollection,\n\tfromJS\n}                 = require(\"immutable\");\nconst PuzzleMixin = require(\"../puzzle-mixin\");\n\nconst infoSchema = {\n\ttitle: \"\",\n\tauthor: \"\",\n\tpublisher: \"\",\n\tcopyright: \"\",\n\tdifficulty: \"\",\n\tintro: \"\",\n\tformatExtra: undefined,\n};\n\nclass PuzzleInfo extends Record(infoSchema, \"PuzzleInfo\") {}\n\nconst schema = {\n\tgrid: List(),\n\tclues: Map({\n\t\tacross: OrderedMap(),\n\t\tdown: OrderedMap(),\n\t}),\n\tuserSolution: List(),\n\tinfo: new PuzzleInfo(),\n\textensions: Map(),\n};\n\n/**\n * Represents an immutable version of {@link xpuz.Puzzle|Puzzle}.\n *\n * @extends external:Immutable.Record\n * @memberof xpuz\n *\n * @mixes xpuz.PuzzleMixin\n */\nclass ImmutablePuzzle extends Record(schema, \"ImmutablePuzzle\") {\n\t/**\n\t * @param {object} args - the constructor arguments\n\t * @param {Types.ImmutableGrid|Types.Grid} args.grid - the grid for the puzzle\n\t * @param {{across: object, down: object}|external:Immutable.Map<{across: external:Immutable.Map, down: external:Immutable.Map}>} args.clues - the\n\t *\tpuzzle clues\n\t * @param {Array<string[]>|external:Immutable.List<external:Immutable.List<string>>} [args.userSolution] - the guesses that the user\n\t *\thas entered for this puzzle, as a two-dimensional array of array of strings with the same dimensions as the `grid` where\n\t *\teach cell is either a string with the user's input or `null` if it corresponds to a block cell in the grid\n\t * @param {xpuz.PuzzleInfo|object} [args.info] - information about the puzzle\n\t * @param {object} [args.extensions] - a store of extra, possibly implementation-dependent information about the puzzle (such as timer information)\n\t */\n\tconstructor({\n\t\tgrid,\n\t\tclues,\n\t\tuserSolution,\n\t\tinfo,\n\t\textensions\n\t}) {\n\t\tif (!(info instanceof PuzzleInfo)) {\n\t\t\tinfo = new PuzzleInfo(info);\n\t\t}\n\n\t\tgrid = grid ? ImmutablePuzzle.processGrid(fromJS(grid)) : List();\n\n\t\tconst args = {\n\t\t\tinfo,\n\t\t\tgrid,\n\t\t\tuserSolution: userSolution ?\n\t\t\t\tfromJS(userSolution) :\n\t\t\t\tgrid.map(\n\t\t\t\t\t(row) => row.map(\n\t\t\t\t\t\t(cell) => cell.get(\"isBlockCell\") ? null : \"\"\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t};\n\n\t\tif (clues) {\n\t\t\targs.clues = Map.isMap(clues) ?\n\t\t\t\tclues :\n\t\t\t\tMap(\n\t\t\t\t\t[\"across\", \"down\"].map(\n\t\t\t\t\t\t(direction) => [\n\t\t\t\t\t\t\tdirection,\n\t\t\t\t\t\t\tOrderedMap(\n\t\t\t\t\t\t\t\tObject.keys(clues[direction]).sort((a, b) => a - b).map(\n\t\t\t\t\t\t\t\t\t(clueNumber) => [Number(clueNumber), clues[direction][clueNumber]]\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t]\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t}\n\n\t\tif (extensions) {\n\t\t\targs.extensions = fromJS(extensions);\n\t\t}\n\n\t\tsuper(args);\n\t}\n\n\t/**\n\t * The grid for this puzzle\n\t *\n\t * @member {Types.ImmutableGrid} grid\n\t * @instance\n\t */\n}\n\nPuzzleMixin({\n\tconstructor: ImmutablePuzzle,\n\tequalityTest: is,\n\tgetter: (obj, path) => obj.getIn(path),\n\tsetter: (obj, path, value) => obj.setIn(path, value instanceof Collection ? value : fromJS(value)),\n\tsizeOf: (obj) => obj.size,\n});\n\nconst oldProcessGrid = ImmutablePuzzle.processGrid;\n\nImmutablePuzzle.processGrid = function processGrid(grid) {\n\treturn grid.withMutations(\n\t\t(gridWithMutations) => oldProcessGrid(gridWithMutations)\n\t);\n};\n\nexports = module.exports = ImmutablePuzzle;\n"],"file":"puzzle.js"}