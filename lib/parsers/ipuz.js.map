{"version":3,"sources":["../../src/parsers/ipuz.js"],"names":["Promise","require","fs","readFile","promisify","max","get","isObject","isString","reduce","Puzzle","BLOCK_VALUE","_checkDimensions","puzzle","errors","maxCellWidth","length","numRows","dimensions","width","push","height","_getClueNumber","cell","_addClue","obj","clue","_convertPuzzle","ipuz","info","title","author","copyright","publisher","difficulty","intro","grid","map","row","isBlockCell","clueNumber","backgroundShape","clues","across","down","_validatePuzzle","_parsePuzzle","resolve","reject","then","fileContent","JSON","parse","toString","content","ex","Error","message","join","IPUZParser","exports","module"],"mappings":"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","sourcesContent":["/**\n * IPUZ file parser.\n *\n * @module xpuz/parsers/ipuz\n */\n\nconst Promise         = require(\"bluebird\");\nconst fs              = require(\"fs\");\n// fs is stubbed out for browser builds\nconst readFile        = fs.readFile ? Promise.promisify(fs.readFile) : () => {};\nconst max             = require(\"lodash/max\");\nconst get             = require(\"lodash/get\");\nconst isObject        = require(\"lodash/isObject\");\nconst isString        = require(\"lodash/isString\");\nconst reduce          = require(\"lodash/reduce\");\nconst Puzzle          = require(\"../puzzle\");\n\nconst BLOCK_VALUE = \"#\";\n\nfunction _checkDimensions(puzzle) {\n\tconst errors = [];\n\n\tconst maxCellWidth = max(\n\t\tpuzzle.puzzle,\n\t\t\"length\"\n\t).length;\n\n\tconst numRows = puzzle.puzzle.length;\n\n\tif (maxCellWidth > puzzle.dimensions.width) {\n\t\terrors.push(`Too many puzzle cells (${maxCellWidth}) for puzzle width (${puzzle.dimensions.width})`);\n\t}\n\n\tif (numRows > puzzle.dimensions.height) {\n\t\terrors.push(`Too many puzzle cells (${numRows}) for puzzle height (${puzzle.dimensions.height})`);\n\t}\n\n\treturn errors;\n}\n\nfunction _getClueNumber(cell) {\n\treturn isObject(cell) ?\n\t\tcell.cell :\n\t\tcell;\n}\n\nfunction _addClue(obj, clue) {\n\tobj[clue[0]] = clue[1];\n\n\treturn obj;\n}\n\nfunction _convertPuzzle(ipuz) {\n\tconst puzzle = new Puzzle({\n\t\tinfo: {\n\t\t\ttitle: ipuz.title,\n\t\t\tauthor: ipuz.author,\n\t\t\tcopyright: ipuz.copyright,\n\t\t\tpublisher: ipuz.publisher,\n\t\t\tdifficulty: ipuz.difficulty,\n\t\t\tintro: ipuz.intro,\n\t\t},\n\t\tgrid: ipuz.puzzle.map(\n\t\t\t(row) => row.map(\n\t\t\t\t(cell) => {\n\t\t\t\t\tif (cell === BLOCK_VALUE) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tisBlockCell: true\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tclueNumber: _getClueNumber(cell),\n\t\t\t\t\t\tbackgroundShape: get(cell, \"style.shapebg\")\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t)\n\t\t),\n\t\tclues: {\n\t\t\tacross: reduce(ipuz.clues.across,\n\t\t\t\t_addClue,\n\t\t\t\t{}\n\t\t\t),\n\t\t\tdown: reduce(ipuz.clues.down,\n\t\t\t\t_addClue,\n\t\t\t\t{}\n\t\t\t),\n\t\t}\n\t});\n\n\treturn puzzle;\n}\n\nfunction _validatePuzzle(puzzle) {\n\tconst errors = [];\n\n\tif (!puzzle.dimensions) {\n\t\terrors.push(\"Puzzle is missing 'dimensions' key\");\n\t}\n\n\tif (puzzle.puzzle) {\n\t\terrors.push(..._checkDimensions(puzzle));\n\t}\n\telse {\n\t\terrors.push(\"Puzzle is missing 'puzzle' key\");\n\t}\n\n\treturn errors.length === 0 ? undefined : errors;\n}\n\nfunction _parsePuzzle(puzzle) {\n\treturn new Promise(\n\t\t(resolve, reject) => {\n\t\t\tif (isString(puzzle)) {\n\t\t\t\t// path to puzzle\n\t\t\t\treturn readFile(puzzle).then(\n\t\t\t\t\t(fileContent) => JSON.parse(fileContent.toString())\n\t\t\t\t).then(\n\t\t\t\t\t(content) => resolve(content)\n\t\t\t\t).catch(\n\t\t\t\t\t(ex) => {\n\t\t\t\t\t\treject(new Error(`Unable to read IPUZ puzzle from file ${puzzle}: ${ex.message}`));\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if (isObject(puzzle)) {\n\t\t\t\tresolve(puzzle);\n\t\t\t\treturn puzzle;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn reject(new Error(\"parse() expects either a path string or an object\"));\n\t\t\t}\n\t\t}\n\t).then(\n\t\t(puzzle) => {\n\t\t\tconst errors = _validatePuzzle(puzzle);\n\n\t\t\tif (errors !== undefined) {\n\t\t\t\tthrow new Error(`Invalid puzzle:\\n\\t${errors.join(\"\\n\\t\")}`);\n\t\t\t}\n\n\t\t\treturn _convertPuzzle(puzzle);\n\t\t}\n\t);\n}\n\n/**\n * Parser class for IPUZ-formatted puzzles\n */\nclass IPUZParser {\n\t/**\n\t * Parses a {@link module:xpuz/puzzle~Puzzle|Puzzle} from the input.\n\t *\n\t * @param {string|object} puzzle - the source to parse the puzzle from; if a string,\n\t *\tit is assumed to be a file path, if an object, it defines a Puzzle object.\n\t *\n\t * @returns {module:xpuz/puzzle~Puzzle} the parsed {@link module:xpuz/puzzle~Puzzle|Puzzle} object\n\t */\n\tparse(puzzle) {\n\t\treturn _parsePuzzle(puzzle);\n\t}\n}\n\nexports = module.exports = IPUZParser;\n"],"file":"ipuz.js"}